//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.8922
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.2.123.20110")]
[assembly: global::System.Reflection.AssemblyCopyrightAttribute("Copyright © PKUICL 2010")]
[assembly: global::System.Reflection.AssemblyCompanyAttribute("PKUICL")]
[assembly: global::System.Reflection.AssemblyProductAttribute("Sim2DSvr")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("Sim2DSvr")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="URWPGSim2D.Sim2DSvr.Y2010.M11, Version=1.2.123.20110, Culture=neutral, PublicKeyT" +
    "oken=04f000b8db128100")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.AllowPartiallyTrustedCallersAttribute()]

namespace URWPGSim2D.Sim2DSvr.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html", ElementName="ClientAnnounceUriRequest")]
    public class ClientAnnounceUriRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ClientAnnounceUriRequest() {
        }
        
        public ClientAnnounceUriRequest(string service) {
            this._Service = service;
        }
        
        private string _Service;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string Service {
            get {
                return this._Service;
            }
            set {
                this._Service = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ClientAnnounceUriRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest typedTarget = ((global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest)(target));
            typedTarget._Service = this._Service;
        }
        
        /// <summary>
        ///Clones ClientAnnounceUriRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest target0 = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ClientAnnounceUriRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Service == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Service);
            }
        }
        
        /// <summary>
        ///Deserializes ClientAnnounceUriRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ClientAnnounceUriRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Service = reader.ReadString();
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html", ElementName="ClientAnnounceUriResponse")]
    public class ClientAnnounceUriResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ClientAnnounceUriResponse() {
        }
        
        public ClientAnnounceUriResponse(int teamCount, int teamId, string missionName, string alternateServerPortUri) {
            this._TeamCount = teamCount;
            this._TeamId = teamId;
            this._MissionName = missionName;
            this._AlternateServerPortUri = alternateServerPortUri;
        }
        
        private int _TeamCount;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int TeamCount {
            get {
                return this._TeamCount;
            }
            set {
                this._TeamCount = value;
            }
        }
        
        private int _TeamId;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int TeamId {
            get {
                return this._TeamId;
            }
            set {
                this._TeamId = value;
            }
        }
        
        private string _MissionName;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=3)]
        public string MissionName {
            get {
                return this._MissionName;
            }
            set {
                this._MissionName = value;
            }
        }
        
        private string _AlternateServerPortUri;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=4)]
        public string AlternateServerPortUri {
            get {
                return this._AlternateServerPortUri;
            }
            set {
                this._AlternateServerPortUri = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ClientAnnounceUriResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriResponse typedTarget = ((global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriResponse)(target));
            typedTarget._TeamCount = this._TeamCount;
            typedTarget._TeamId = this._TeamId;
            typedTarget._MissionName = this._MissionName;
            typedTarget._AlternateServerPortUri = this._AlternateServerPortUri;
        }
        
        /// <summary>
        ///Clones ClientAnnounceUriResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriResponse target0 = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ClientAnnounceUriResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._TeamCount);
            writer.Write(this._TeamId);
            if ((this._MissionName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._MissionName);
            }
            if ((this._AlternateServerPortUri == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._AlternateServerPortUri);
            }
        }
        
        /// <summary>
        ///Deserializes ClientAnnounceUriResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ClientAnnounceUriResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TeamCount = reader.ReadInt32();
            this._TeamId = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._MissionName = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._AlternateServerPortUri = reader.ReadString();
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html", ElementName="ClientAnnounceTeamNameRequest")]
    public class ClientAnnounceTeamNameRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ClientAnnounceTeamNameRequest() {
        }
        
        public ClientAnnounceTeamNameRequest(string service, int teamId, string teamName) {
            this._Service = service;
            this._TeamId = teamId;
            this._TeamName = teamName;
        }
        
        private string _Service;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string Service {
            get {
                return this._Service;
            }
            set {
                this._Service = value;
            }
        }
        
        private int _TeamId;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int TeamId {
            get {
                return this._TeamId;
            }
            set {
                this._TeamId = value;
            }
        }
        
        private string _TeamName;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=3)]
        public string TeamName {
            get {
                return this._TeamName;
            }
            set {
                this._TeamName = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ClientAnnounceTeamNameRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest typedTarget = ((global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest)(target));
            typedTarget._Service = this._Service;
            typedTarget._TeamId = this._TeamId;
            typedTarget._TeamName = this._TeamName;
        }
        
        /// <summary>
        ///Clones ClientAnnounceTeamNameRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest target0 = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ClientAnnounceTeamNameRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Service == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Service);
            }
            writer.Write(this._TeamId);
            if ((this._TeamName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._TeamName);
            }
        }
        
        /// <summary>
        ///Deserializes ClientAnnounceTeamNameRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ClientAnnounceTeamNameRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Service = reader.ReadString();
            }
            this._TeamId = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._TeamName = reader.ReadString();
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html", ElementName="ClientAnnounceReadyRequest")]
    public class ClientAnnounceReadyRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ClientAnnounceReadyRequest() {
        }
        
        public ClientAnnounceReadyRequest(int teamId) {
            this._TeamId = teamId;
        }
        
        private int _TeamId;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int TeamId {
            get {
                return this._TeamId;
            }
            set {
                this._TeamId = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ClientAnnounceReadyRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest typedTarget = ((global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest)(target));
            typedTarget._TeamId = this._TeamId;
        }
        
        /// <summary>
        ///Clones ClientAnnounceReadyRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest target0 = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ClientAnnounceReadyRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._TeamId);
        }
        
        /// <summary>
        ///Deserializes ClientAnnounceReadyRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ClientAnnounceReadyRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TeamId = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html", ElementName="CompetitionTypeChangedRequest")]
    public class CompetitionTypeChangedRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CompetitionTypeChangedRequest() {
        }
        
        public CompetitionTypeChangedRequest(string competitionType, int teamCount) {
            this._CompetitionType = competitionType;
            this._TeamCount = teamCount;
        }
        
        private string _CompetitionType;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string CompetitionType {
            get {
                return this._CompetitionType;
            }
            set {
                this._CompetitionType = value;
            }
        }
        
        private int _TeamCount;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int TeamCount {
            get {
                return this._TeamCount;
            }
            set {
                this._TeamCount = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CompetitionTypeChangedRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest typedTarget = ((global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest)(target));
            typedTarget._CompetitionType = this._CompetitionType;
            typedTarget._TeamCount = this._TeamCount;
        }
        
        /// <summary>
        ///Clones CompetitionTypeChangedRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest target0 = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CompetitionTypeChangedRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._CompetitionType == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._CompetitionType);
            }
            writer.Write(this._TeamCount);
        }
        
        /// <summary>
        ///Deserializes CompetitionTypeChangedRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CompetitionTypeChangedRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._CompetitionType = reader.ReadString();
            }
            this._TeamCount = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html", ElementName="CompetitionControlButtonRequest")]
    public class CompetitionControlButtonRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CompetitionControlButtonRequest() {
        }
        
        public CompetitionControlButtonRequest(string controlButtonMessage) {
            this._ControlButtonMessage = controlButtonMessage;
        }
        
        private string _ControlButtonMessage;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string ControlButtonMessage {
            get {
                return this._ControlButtonMessage;
            }
            set {
                this._ControlButtonMessage = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CompetitionControlButtonRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest typedTarget = ((global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest)(target));
            typedTarget._ControlButtonMessage = this._ControlButtonMessage;
        }
        
        /// <summary>
        ///Clones CompetitionControlButtonRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest target0 = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CompetitionControlButtonRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._ControlButtonMessage == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._ControlButtonMessage);
            }
        }
        
        /// <summary>
        ///Deserializes CompetitionControlButtonRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CompetitionControlButtonRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._ControlButtonMessage = reader.ReadString();
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html", ElementName="MissionParaRequest")]
    public class MissionParaRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public MissionParaRequest() {
        }
        
        public MissionParaRequest(global::URWPGSim2D.Common.Mission curMission) {
            this._CurMission = curMission;
        }
        
        private global::URWPGSim2D.Common.Mission _CurMission;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::URWPGSim2D.Common.Mission CurMission {
            get {
                return this._CurMission;
            }
            set {
                this._CurMission = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current MissionParaRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest typedTarget = ((global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest)(target));
            if ((this._CurMission != null)) {
                global::URWPGSim2D.Common.Mission tmp = new global::URWPGSim2D.Common.Mission();
                ((Microsoft.Dss.Core.IDssSerializable)(this._CurMission)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._CurMission = tmp;
            }
        }
        
        /// <summary>
        ///Clones MissionParaRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest target0 = new global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current MissionParaRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._CurMission == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._CurMission)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes MissionParaRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized MissionParaRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._CurMission = ((global::URWPGSim2D.Common.Mission)(((Microsoft.Dss.Core.IDssSerializable)(new global::URWPGSim2D.Common.Mission())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.ursim.org/2010/11/sim2dsvr.html", ElementName="Sim2DSvrState")]
    public class Sim2DSvrState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Sim2DSvrState() {
        }
        
        /// <summary>
        ///Copies the data member values of the current Sim2DSvrState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::URWPGSim2D.Sim2DSvr.Proxy.Sim2DSvrState typedTarget = ((global::URWPGSim2D.Sim2DSvr.Proxy.Sim2DSvrState)(target));
        }
        
        /// <summary>
        ///Clones Sim2DSvrState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::URWPGSim2D.Sim2DSvr.Proxy.Sim2DSvrState target0 = new global::URWPGSim2D.Sim2DSvr.Proxy.Sim2DSvrState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Sim2DSvrState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes Sim2DSvrState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Sim2DSvrState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ClientAnnounceUri : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriResponse>> {
        
        public ClientAnnounceUri() {
        }
        
        public ClientAnnounceUri(global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest body) : 
                base(body) {
        }
        
        public ClientAnnounceUri(global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriResponse> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ClientAnnounceTeamName : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ClientAnnounceTeamName() {
        }
        
        public ClientAnnounceTeamName(global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest body) : 
                base(body) {
        }
        
        public ClientAnnounceTeamName(global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ClientAnnounceReady : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ClientAnnounceReady() {
        }
        
        public ClientAnnounceReady(global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest body) : 
                base(body) {
        }
        
        public ClientAnnounceReady(global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CompetitionTypeChanged : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public CompetitionTypeChanged() {
        }
        
        public CompetitionTypeChanged(global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest body) : 
                base(body) {
        }
        
        public CompetitionTypeChanged(global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CompetitionControlButton : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public CompetitionControlButton() {
        }
        
        public CompetitionControlButton(global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest body) : 
                base(body) {
        }
        
        public CompetitionControlButton(global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class MissionPara : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public MissionPara() {
        }
        
        public MissionPara(global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest body) : 
                base(body) {
        }
        
        public MissionPara(global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::URWPGSim2D.Sim2DSvr.Proxy.Sim2DSvrState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::URWPGSim2D.Sim2DSvr.Proxy.Sim2DSvrState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Sim2DSvrOperations : global::Microsoft.Ccr.Core.PortSet<global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUri, global:: URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamName, global:: URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReady, global:: URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChanged, global:: URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButton, global:: URWPGSim2D.Sim2DSvr.Proxy.MissionPara, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: URWPGSim2D.Sim2DSvr.Proxy.Get, global:: URWPGSim2D.Sim2DSvr.Proxy.Subscribe> {
        
        public Sim2DSvrOperations() {
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriResponse> ClientAnnounceUri(string service) {
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest body = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest(service);
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUri operation = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUri(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ClientAnnounceUri(string service, out global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUri operation) {
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest body = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest(service);
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUri(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriResponse> ClientAnnounceUri(global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest body) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest();
            }
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUri operation = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUri(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ClientAnnounceUri(global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest body, out global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUri operation) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUriRequest();
            }
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceUri(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ClientAnnounceTeamName(string service, int teamId, string teamName) {
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest body = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest(service, teamId, teamName);
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamName operation = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamName(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ClientAnnounceTeamName(string service, int teamId, string teamName, out global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamName operation) {
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest body = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest(service, teamId, teamName);
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamName(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ClientAnnounceTeamName(global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest body) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest();
            }
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamName operation = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamName(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ClientAnnounceTeamName(global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest body, out global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamName operation) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamNameRequest();
            }
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceTeamName(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ClientAnnounceReady(int teamId) {
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest body = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest(teamId);
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReady operation = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReady(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ClientAnnounceReady(int teamId, out global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReady operation) {
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest body = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest(teamId);
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReady(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ClientAnnounceReady(global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest body) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest();
            }
            global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReady operation = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReady(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ClientAnnounceReady(global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest body, out global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReady operation) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReadyRequest();
            }
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.ClientAnnounceReady(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> CompetitionTypeChanged(string competitionType, int teamCount) {
            global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest body = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest(competitionType, teamCount);
            global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChanged operation = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CompetitionTypeChanged(string competitionType, int teamCount, out global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChanged operation) {
            global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest body = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest(competitionType, teamCount);
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> CompetitionTypeChanged(global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest body) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest();
            }
            global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChanged operation = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CompetitionTypeChanged(global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest body, out global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChanged operation) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChangedRequest();
            }
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionTypeChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> CompetitionControlButton(string controlButtonMessage) {
            global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest body = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest(controlButtonMessage);
            global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButton operation = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CompetitionControlButton(string controlButtonMessage, out global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButton operation) {
            global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest body = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest(controlButtonMessage);
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> CompetitionControlButton(global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest body) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest();
            }
            global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButton operation = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CompetitionControlButton(global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest body, out global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButton operation) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButtonRequest();
            }
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.CompetitionControlButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> MissionPara(global::URWPGSim2D.Common.Mission curMission) {
            global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest body = new global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest(curMission);
            global::URWPGSim2D.Sim2DSvr.Proxy.MissionPara operation = new global::URWPGSim2D.Sim2DSvr.Proxy.MissionPara(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice MissionPara(global::URWPGSim2D.Common.Mission curMission, out global::URWPGSim2D.Sim2DSvr.Proxy.MissionPara operation) {
            global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest body = new global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest(curMission);
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.MissionPara(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> MissionPara(global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest body) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest();
            }
            global::URWPGSim2D.Sim2DSvr.Proxy.MissionPara operation = new global::URWPGSim2D.Sim2DSvr.Proxy.MissionPara(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice MissionPara(global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest body, out global::URWPGSim2D.Sim2DSvr.Proxy.MissionPara operation) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.Proxy.MissionParaRequest();
            }
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.MissionPara(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::URWPGSim2D.Sim2DSvr.Proxy.Sim2DSvrState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::URWPGSim2D.Sim2DSvr.Proxy.Get operation = new global::URWPGSim2D.Sim2DSvr.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::URWPGSim2D.Sim2DSvr.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::URWPGSim2D.Sim2DSvr.Proxy.Sim2DSvrState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::URWPGSim2D.Sim2DSvr.Proxy.Get operation = new global::URWPGSim2D.Sim2DSvr.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::URWPGSim2D.Sim2DSvr.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::URWPGSim2D.Sim2DSvr.Proxy.Subscribe operation = new global::URWPGSim2D.Sim2DSvr.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::URWPGSim2D.Sim2DSvr.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::URWPGSim2D.Sim2DSvr.Proxy.Subscribe operation = new global::URWPGSim2D.Sim2DSvr.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::URWPGSim2D.Sim2DSvr.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::URWPGSim2D.Sim2DSvr.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Sim2DSvr service (水中机器人水球比赛仿真平台服务端服务)")]
    [global::System.ComponentModel.DisplayNameAttribute("Sim2DSvr")]
    public class Contract {
        
        public const string Identifier = "http://www.ursim.org/2010/11/sim2dsvr.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://www.ursim.org/2010/11/sim2dsvr.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://www.ursim.org/2010/11/sim2dsvr.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.Sim2DSvrOperations = new global::URWPGSim2D.Sim2DSvr.Proxy.Sim2DSvrOperations();
            this.ClientBaseOperations = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientBaseOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.Sim2DSvrOperations, "http://www.ursim.org/2010/11/sim2dsvr.html", "Sim2DSvrOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ClientBaseOperations, "http://www.ursim.org/2010/11/sim2dclientbase.html", "ClientBaseOperations", null));
        }
        
        public global::URWPGSim2D.Sim2DSvr.Proxy.Sim2DSvrOperations Sim2DSvrOperations;
        
        public global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientBaseOperations ClientBaseOperations;
    }
}
namespace URWPGSim2D.Sim2DSvr.ClientBase.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.ursim.org/2010/11/sim2dclientbase.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.ursim.org/2010/11/sim2dclientbase.html", ElementName="HeartBeatRequest")]
    public class HeartBeatRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public HeartBeatRequest() {
        }
        
        public HeartBeatRequest(string heartBeat) {
            this._HeartBeat = heartBeat;
        }
        
        private string _HeartBeat;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string HeartBeat {
            get {
                return this._HeartBeat;
            }
            set {
                this._HeartBeat = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current HeartBeatRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest typedTarget = ((global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest)(target));
            typedTarget._HeartBeat = this._HeartBeat;
        }
        
        /// <summary>
        ///Clones HeartBeatRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest target0 = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current HeartBeatRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._HeartBeat == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._HeartBeat);
            }
        }
        
        /// <summary>
        ///Deserializes HeartBeatRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized HeartBeatRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._HeartBeat = reader.ReadString();
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.ursim.org/2010/11/sim2dclientbase.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.ursim.org/2010/11/sim2dclientbase.html", ElementName="HeartBeatResponse")]
    public class HeartBeatResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public HeartBeatResponse() {
        }
        
        public HeartBeatResponse(string rspHeartBeat) {
            this._RspHeartBeat = rspHeartBeat;
        }
        
        private string _RspHeartBeat;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string RspHeartBeat {
            get {
                return this._RspHeartBeat;
            }
            set {
                this._RspHeartBeat = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current HeartBeatResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatResponse typedTarget = ((global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatResponse)(target));
            typedTarget._RspHeartBeat = this._RspHeartBeat;
        }
        
        /// <summary>
        ///Clones HeartBeatResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatResponse target0 = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current HeartBeatResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._RspHeartBeat == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._RspHeartBeat);
            }
        }
        
        /// <summary>
        ///Deserializes HeartBeatResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized HeartBeatResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._RspHeartBeat = reader.ReadString();
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.ursim.org/2010/11/sim2dclientbase.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.ursim.org/2010/11/sim2dclientbase.html", ElementName="TeamIdChangedRequest")]
    public class TeamIdChangedRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public TeamIdChangedRequest() {
        }
        
        public TeamIdChangedRequest(int teamId) {
            this._TeamId = teamId;
        }
        
        private int _TeamId;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int TeamId {
            get {
                return this._TeamId;
            }
            set {
                this._TeamId = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current TeamIdChangedRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest typedTarget = ((global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest)(target));
            typedTarget._TeamId = this._TeamId;
        }
        
        /// <summary>
        ///Clones TeamIdChangedRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest target0 = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current TeamIdChangedRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._TeamId);
        }
        
        /// <summary>
        ///Deserializes TeamIdChangedRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized TeamIdChangedRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TeamId = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.ursim.org/2010/11/sim2dclientbase.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.ursim.org/2010/11/sim2dclientbase.html", ElementName="ClientAnnounceDecisionRequest")]
    public class ClientAnnounceDecisionRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ClientAnnounceDecisionRequest() {
        }
        
        public ClientAnnounceDecisionRequest(URWPGSim2D.Common.Decision[] decisions, int teamId) {
            this._Decisions = decisions;
            this._TeamId = teamId;
        }
        
        private URWPGSim2D.Common.Decision[] _Decisions;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public URWPGSim2D.Common.Decision[] Decisions {
            get {
                return this._Decisions;
            }
            set {
                this._Decisions = value;
            }
        }
        
        private int _TeamId;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int TeamId {
            get {
                return this._TeamId;
            }
            set {
                this._TeamId = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ClientAnnounceDecisionRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest typedTarget = ((global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest)(target));
            if ((this._Decisions != null)) {
                int count = this._Decisions.Length;
                global::URWPGSim2D.Common.Decision[] tmp = new global::URWPGSim2D.Common.Decision[count];
                this._Decisions.CopyTo(tmp, 0);
                typedTarget._Decisions = tmp;
            }
            typedTarget._TeamId = this._TeamId;
        }
        
        /// <summary>
        ///Clones ClientAnnounceDecisionRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest target0 = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ClientAnnounceDecisionRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Decisions == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._Decisions.Length);
                for (int indexDecisions = 0; (indexDecisions < this._Decisions.Length); indexDecisions = (indexDecisions + 1)) {
                    global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeAsXml(writer, this._Decisions[indexDecisions]);
                }
            }
            writer.Write(this._TeamId);
        }
        
        /// <summary>
        ///Deserializes ClientAnnounceDecisionRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ClientAnnounceDecisionRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int tmp0 = reader.ReadInt32();
                int count0 = reader.ReadInt32();
                this._Decisions = new global::URWPGSim2D.Common.Decision[count0];
                for (int index = 0; (index < count0); index = (index + 1)) {
                    this._Decisions[index] = ((global::URWPGSim2D.Common.Decision)(global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeXml(reader, typeof(global::URWPGSim2D.Common.Decision))));
                }
            }
            this._TeamId = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.ursim.org/2010/11/sim2dclientbase.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.ursim.org/2010/11/sim2dclientbase.html", ElementName="ClientBaseState")]
    public class ClientBaseState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ClientBaseState() {
        }
        
        /// <summary>
        ///Copies the data member values of the current ClientBaseState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientBaseState typedTarget = ((global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientBaseState)(target));
        }
        
        /// <summary>
        ///Clones ClientBaseState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientBaseState target0 = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientBaseState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ClientBaseState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes ClientBaseState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ClientBaseState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class HeartBeat : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatResponse>> {
        
        public HeartBeat() {
        }
        
        public HeartBeat(global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest body) : 
                base(body) {
        }
        
        public HeartBeat(global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatResponse> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class TeamIdChanged : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public TeamIdChanged() {
        }
        
        public TeamIdChanged(global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest body) : 
                base(body) {
        }
        
        public TeamIdChanged(global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ClientAnnounceDecision : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ClientAnnounceDecision() {
        }
        
        public ClientAnnounceDecision(global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest body) : 
                base(body) {
        }
        
        public ClientAnnounceDecision(global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientBaseState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientBaseState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ClientBaseOperations : global::Microsoft.Ccr.Core.PortSet<global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeat, global:: URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChanged, global:: URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecision, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: URWPGSim2D.Sim2DSvr.ClientBase.Proxy.Get> {
        
        public ClientBaseOperations() {
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatResponse> HeartBeat(string heartBeat) {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest body = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest(heartBeat);
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeat operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeat(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HeartBeat(string heartBeat, out global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeat operation) {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest body = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest(heartBeat);
            operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeat(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatResponse> HeartBeat(global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest body) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest();
            }
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeat operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeat(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HeartBeat(global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest body, out global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeat operation) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeatRequest();
            }
            operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.HeartBeat(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> TeamIdChanged(int teamId) {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest body = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest(teamId);
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChanged operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice TeamIdChanged(int teamId, out global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChanged operation) {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest body = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest(teamId);
            operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> TeamIdChanged(global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest body) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest();
            }
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChanged operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice TeamIdChanged(global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest body, out global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChanged operation) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChangedRequest();
            }
            operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.TeamIdChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ClientAnnounceDecision(URWPGSim2D.Common.Decision[] decisions, int teamId) {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest body = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest(decisions, teamId);
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecision operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecision(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ClientAnnounceDecision(URWPGSim2D.Common.Decision[] decisions, int teamId, out global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecision operation) {
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest body = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest(decisions, teamId);
            operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecision(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ClientAnnounceDecision(global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest body) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest();
            }
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecision operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecision(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ClientAnnounceDecision(global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest body, out global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecision operation) {
            if ((body == null)) {
                body = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecisionRequest();
            }
            operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientAnnounceDecision(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientBaseState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.Get operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientBaseState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.Get operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Contract {
        
        public const string Identifier = "http://www.ursim.org/2010/11/sim2dclientbase.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://www.ursim.org/2010/11/sim2dclientbase.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://www.ursim.org/2010/11/sim2dclientbase.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.ClientBaseOperations = new global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientBaseOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ClientBaseOperations, "http://www.ursim.org/2010/11/sim2dclientbase.html", "ClientBaseOperations", ""));
        }
        
        public global::URWPGSim2D.Sim2DSvr.ClientBase.Proxy.ClientBaseOperations ClientBaseOperations;
    }
}
